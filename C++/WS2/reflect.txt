// Mikhail Frolov
// 164788184

  4. In this workshop 02 I learned how to use references to modify the content of variables in other scopes ,overload functions (same name but different signature) and how to allocate and deallocate dynamic memory for and array and a single variable. Also I practiced using namespaces and putting safeguards which protects the header file so it cannot be copied more than once into a single file and also prevents duplication of the definitions. When declaring an array we should remember to include additional space for the null byte. In order to avoid undesired behaviour of an array we should not exceed the length so I used cin.width(number of maximum characters + 1(null byte)) and then accepted the value using cin.

   1-2. Dynamic memory is obtained from the operating system during execution, while static memory is allocated for an application at load time.
When we allocate dynamic memory we need to deallocate it because variables in dynamic memory doesn't go out of scope automatically at the closing brace of the code block. We must deallocate it manually and set it equal to a null pointer so it holds the null address. 
   3. Overloaded functions in this workshop might have the same name but they have a different signature and multiple meanings. We could reuse these functions thorough the code and call them inside the function too.
   
   The most difficult thing for me was to understand how all the code is going to work because without understanding the whole model of the code I wasn't able to modify some of the workshop's parts. Also, I had to go through the notes on the homepage to search for some code examples so I could apply them in my code. And also I had the mistake called bad access when I couldn't enter more than one wrapping pattern so in order to solve this issue I created a for loop for the amount of wrap_layers and allocated dynamic memory for gift.wrap[i].pattern that I set equal to the length of the string(strlen) of char pattern1 then copied the value of char into the pointer using strcpy. In other words I created a variable to insert text into it so I know how much memory to allocate for the pattern.